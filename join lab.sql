use sakila;

# 1
# List the number of films per category.
select count(film_id) as number_of_films, c.name 
from film
inner join film_category as fc
using (film_id)
inner join category as c
using (category_id)
group by c.name
;

# Retrieve the store ID, city, and country for each store.
select store_id, city, country
from store
inner join address using (address_id)
inner join city using (city_id)
inner join country using (country_id)
;

# Calculate the total revenue generated by each store in dollars.
select store_id, CONCAT('$', FORMAT(SUM(amount), 2)) as revenue_generated
from staff
inner join store using (store_id)
inner join payment using (staff_id)
group by store_id
;

# Determine the average running time of films for each category.
select c.name, lower(concat(floor(avg(length)/60), ' hours ', round(avg(length)%60, 0), ' minutes')) as avg_length
from film
inner join film_category using (film_id)
inner join category as c using (category_id)
group by c.name;
;

# Determine if "Academy Dinosaur" can be rented from Store 1.
select inventory_id as available_to_rent_in_store_1, f.title
from inventory as i
inner join store as s using (store_id)
inner join film as f using (film_id)
where s.store_id = 1 and f.title = 'ACADEMY DINOSAUR'
;

# Provide a list of all distinct film titles, along with their availability status in the inventory. Include a column indicating whether each title is 'Available' or 'NOT available.' Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."
select distinct f.title,
	case
		when isnull(i.film_id) then 'NOT available' else 'Available' end as availability 
from film as f
left join inventory as i using(film_id)
group by f.title, availability
order by availability desc
;


